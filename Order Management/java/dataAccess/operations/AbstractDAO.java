package dataAccess.operations;

import dataAccess.connection.ConnectionFactory;

import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/** AbstractDAO Class
 *
 * Defines generic the basic CRUD operations on tables.
 * The more specific queries will be implemented the classes that extend this class.
 * @param <T>
 */

public abstract class AbstractDAO<T> {
    protected static final Logger LOGGER = Logger.getLogger(AbstractDAO.class.getName());

    private final Class<T> type;

    @SuppressWarnings("unchecked")
    public AbstractDAO() {
        this.type = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
    }

    /**
     * Creates a parameterizable select query.
     * @param field The field by which the query identifies a specific row.
     * @return A parameterized query.
     */
    protected String createSelectQuery(String field) {
        StringBuilder sb = new StringBuilder();

        sb.append("SELECT * FROM ");
        sb.append(type.getSimpleName());
        sb.append(" WHERE ");
        sb.append(field);
        sb.append(" = ?");

        return sb.toString();
    }

    /**
     * Creates a parameterizable insert query.
     * @return A parameterized insert query.
     */
    protected String createInsertQuery() {
        StringBuilder sb = new StringBuilder();
        int fields = 0;

        sb.append("INSERT INTO ");
        sb.append(type.getSimpleName());
        sb.append(" (");

        for (Field field : type.getDeclaredFields()) {
            if (!field.getName().equals("id")) {
                sb.append(field.getName());
                sb.append(", ");
                fields++;
            }
        }
        sb.delete(sb.length()-2, sb.length());

        sb.append(") VALUES (");

        for (int i = 0; i < fields; i++) {
            sb.append("?, ");
        }
        sb.delete(sb.length()-2, sb.length());

        sb.append(")");

        return sb.toString();
    }

    /**
     * Creates a parameterizable update query.
     * @return A parameterized update query.
     */
    protected String createUpdateQuery() {
        StringBuilder sb = new StringBuilder();

        sb.append("UPDATE ");
        sb.append(type.getSimpleName());
        sb.append(" SET ");

        for (Field field : type.getDeclaredFields()) {
            if (!field.getName().equals("id")) {
                sb.append(field.getName());
                sb.append(" = ?, ");
            }
        }
        sb.delete(sb.length()-2, sb.length());

        sb.append(" WHERE id = ?");

        return sb.toString();
    }

    /**
     * Creates a parameterizable delete query.
     * @return A parameterized delete query.
     */
    protected String createDeleteQuery() {
        StringBuilder sb = new StringBuilder();

        sb.append("DELETE FROM ");
        sb.append(type.getSimpleName());
        sb.append(" WHERE id = ?");

        return sb.toString();
    }

    /**
     * Creates a list of objects from the resultSet generated by the execution of the query.
     * @param resultSet Result set of an executed query.
     * @return A list with the specific class objects created based on the result set.
     */
    protected List<T> createObjects(ResultSet resultSet) {
        List<T> list = new ArrayList<T>();

        try {
            while (resultSet.next()) {
                T instance = type.getDeclaredConstructor().newInstance();

                for (Field field : type.getDeclaredFields()) {
                    Object value = resultSet.getObject(field.getName());
                    PropertyDescriptor propertyDescriptor = new PropertyDescriptor(field.getName(), type);
                    Method method = propertyDescriptor.getWriteMethod();
                    method.invoke(instance, value);
                }

                list.add(instance);
            }
        } catch (InstantiationException | IllegalAccessException | SQLException | NoSuchMethodException | InvocationTargetException | IntrospectionException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:createObjects " + e.getMessage());
        }

        return list;
    }

    /**
     * Executes a find by id query.
     * @param id The corresponding row id.
     * @return First class object that matches the id.
     */
    public T findById(int id) {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String query = createSelectQuery(type.getDeclaredFields()[0].getName());
        List<T> result;

        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query);
            statement.setInt(1, id);
            resultSet = statement.executeQuery();

            result = createObjects(resultSet);

            if (result.isEmpty())
                return null;

            return result.get(0);
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:findById " + e.getMessage());
        } finally {
            ConnectionFactory.close(resultSet);
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }

        return null;
    }

    /**
     * Executes an insert query.
     * @param object Object to be inserted
     * @return The id of the inserted object.
     */
    public int insert(T object) {
        Connection connection = null;
        PreparedStatement statement = null;
        String query = createInsertQuery();
        ResultSet resultSet = null;

        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);

            int index = 1;
            for (Field field : object.getClass().getDeclaredFields()) {
                if (!field.getName().equals("id")) {
                    field.setAccessible(true);
                    Object value = field.get(object);
                    statement.setString(index, value.toString());
                    index++;
                }
            }

            statement.executeUpdate();
            resultSet = statement.getGeneratedKeys();
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }

            return -1;
        } catch (SQLException | IllegalAccessException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:insert " + e.getMessage());
        } finally {
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }

        return -1;
    }

    /**
     * Executes an update query.
     * @param object Object to be updated containing the id and the updated fields
     */
    public void update(T object) {
        Connection connection = null;
        PreparedStatement statement = null;
        String query = createUpdateQuery();

        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query);

            int index = 1;
            for (Field field : object.getClass().getDeclaredFields()) {
                field.setAccessible(true);
                Object value = field.get(object);

                if (field.getName().equals("id") || field.getName().equals("orderId")) {
                    statement.setString(object.getClass().getDeclaredFields().length, value.toString());
                } else {
                    statement.setString(index, value.toString());
                    index++;
                }
            }

            statement.executeUpdate();
        } catch (SQLException | IllegalAccessException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:update " + e.getMessage());
        } finally {
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }
    }

    /**
     * Executes a delete by id query.
     * @param id The id which identifies the row to be deleted.
     */
    public void deleteById(int id) {
        Connection connection = null;
        PreparedStatement statement = null;
        String query = createDeleteQuery();

        try {
            connection = ConnectionFactory.getConnection();
            statement = connection.prepareStatement(query);

            statement.setInt(1, id);

            statement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, type.getName() + "DAO:delete " + e.getMessage());
        } finally {
            ConnectionFactory.close(statement);
            ConnectionFactory.close(connection);
        }
    }

}
